{
  "COMMON": {
    "BACK": "Atrás",
    "SEARCH": "Buscar",
    "SEARCH_PLACEHOLDER": "Buscar..."
  },
  "HOME": {
    "HOMEPAGE": {
      "TITLE": "Bluejay - TP Tester",
      "INTRO_PARAGRAPH": "Este proyecto es una extensión de Bluejay. La documentación oficial de Bluejay se puede encontrar en: <a href='https://docs.bluejay.governify.io/' target='_blank'>docs.bluejay.governify.io</a>. Al ser una extensión de Bluejay, es imprescindible para el completo funcionamiento de Bluejay-Tester.",
      "INTRODUCTION_TITLE": "Introducción",
      "WHAT_IS_BLUEJAY_TITLE": "¿Qué es Bluejay?",
      "WHAT_IS_BLUEJAY_DESCRIPTION": "Bluejay Infrastructure es una infraestructura basada en Governify que permite auditar equipos ágiles de manera sencilla. Está compuesta por un subconjunto de microservicios de Governify que pueden ser desplegados ya sea en una sola máquina o en un clúster. Bluejay accede a múltiples fuentes para recopilar información sobre los equipos de desarrollo, como GitLab, Jira, Slack, etc., y utiliza esta información para verificar si esos equipos cumplen con un Acuerdo de Prácticas de Equipo (TPA) que incluye métricas y garantías relacionadas con la metodología ágil.",
      "WHAT_IS_TPT_TITLE": "¿Para qué sirve Bluejay-TP Tester?",
      "WHAT_IS_TPT_DESCRIPTION": "El objetivo de este TP-Tester es, como dice su nombre, poder probar en primer lugar las métricas que componen los TPs (Team Practices). Una vez comprobadas que estas métricas funcionan correctamente, TP-Tester te permite comprobar que todo el TPA (Team Practice Agreement) funcione correctamente. Para ello, se pueden añadir, eliminar, o modificar TPAs que se encuentran directmanente en Bluejay desde este TP Tester.",
      "GETTING_STARTED_TITLE": "Puesta en marcha",
      "DEVELOPMENT_MODE_TITLE": "Modo desarrollo",
      "DEVELOPMENT_MODE_STEPS": "Para levantar Bluejay-TP Tester en modo desarrollo, sigue los siguientes pasos:",
      "DEVELOPMENT_MODE_STEP_1": "Clona el repositorio de Bluejay-TP Tester.",
      "DEVELOPMENT_MODE_STEP_2": "Instala las dependencias con `npm install`.",
      "DEVELOPMENT_MODE_STEP_3": "Levanta el proyecto con `ng start`.",
      "DEVELOPMENT_MODE_DESCRIPTION": "Con esto bastaría ya que el proyecto utiliza concurrently y levanta a la vez el servidor express y angular. El servidor Express (GlassMatrix API) se levanta en el puerto 6012 y la aplicación Angular en el puerto 4200.",
      "DOCKER_MODE_TITLE": "Con docker",
      "DOCKER_MODE_STEPS": "Para levantar Bluejay-TP Tester con docker, sigue los siguientes pasos:",
      "DOCKER_MODE_STEP_1": "Clona el repositorio de Bluejay-TP Tester.",
      "DOCKER_MODE_STEP_2": "Ejecuta `docker-compose up --build`.",
      "DOCKER_MODE_DESCRIPTION": "Con esto ya tendríamos el proyecto levantado en el puerto 6011 la web angular, y el servidor express en el puerto 6012."
    },
    "LANGS": {
      "TITLE": "Bluejay - TP Tester",
      "INTRO_PARAGRAPH": "Gracias a la libreria ngx-translate (<a href='https://github.com/ngx-translate/core' target='_blank'>github.com/ngx-translate/core</a>). Por defecto, TP Tester, estará en el idioma del navegador. Esta libreria permite además añadir traducciones de una forma sencilla ya que bastaría con traducir el Json de un idioma a otro y no habría que modificar ningún otro tipo de fichero.",
      "JSON_EXAMPLE_TITLE": "Este es un fragmento de cómo funciona el .json de lenguaje:",
      "JSON_EXAMPLE_CONTENT": "\"METRICS_LOADER\": {\\n  \\\"TITULO1\\\": \\\"Métricas guardadas\\\",\\n  \\\"TITULO2\\\": \\\"Crear nueva métrica\\\",\\n  \\\"MESSAGE_TEXT\\\": \\\"No hay métricas guardadas\\\",\\n  \\\"FILE_NAME\\\": \\\"Nombre del archivo\\\",\\n  \\\"VIEW_FILE\\\": \\\"Ver archivo\\\",\\n  \\\"EXECUTE_EDIT_FILE\\\": \\\"Ejecutar / Editar archivo\\\",\\n  \\\"DELETE_FILE\\\": \\\"Eliminar archivo\\\",\\n  \\\"VIEWER\\\": {\\n    \\\"VIEWING\\\": \\\"fileName.\\\"\\n  }\\n}",
      "JSON_EXPLANATION": "En este fragmento, cada clave representa una cadena de texto que se mostrará en la aplicación. Por tanto, únicamente se tendría que cambiar el contenido de las cadenas de texto y dejar tal cual las claves para traducir a otros idiomas.",
      "LANGUAGE_CHANGE_INFO": "Además, si no se quiero usar el idioma por defecto del navegador, en la esquina superior de la pantalla se permite cambiar entre los dos idiomas actuales, español o inglés."
    },
    "METRICSTESTS": {
      "TITLE": "Testear métricas",
      "PARAGRAPH1": "Para testear métricas, en primer lugar habrá que acceder a la página de metrics tester. En primer lugar hay una sección en donde podemos realizar acciones con las métricas ya guardadas. En la parte inferior, podemos testear una nueva métrica.",
      "PARAGRAPH2": "Por defecto, habrá una métrica en la zona de crear nueva metrica. Esta métrica es simplemente un ejemplo y es totalmente editable o directamente se puede borrar y usar una nueva.",
      "PARAGRAPH3": "Una vez que hemos introduccido la métrica que queremos testear, hay que darle a publicar. Esto interactuará con el endpoint de Bluejay y tras obtener la computación inicial, se desbloqueará el botón de obtener cálculo. Esto tardará unos segundos y devolverá los valores de las métricas que estamos testando en ese repositorio.",
      "PARAGRAPH4": "Una vez que hemos comprobado la métrica (o antes si lo deseas) también habrá un botón para guardar la métrica y tenerla siempre a mano en el repostiorio local con el nombre que queramos. Cuando la tengamos guardada, ya se podrá acceder a ella desde la seccion superior y podremos volver ejecutarla, editarla o borrarla.",
      "SUBTITLE": "Edición de métricas",
      "PARAGRAPH5": "Si en la primera seccion accedemos a editar métrícas entraremos en una página como la inferior. Esta página tiene la opción de utilizar la hora actual (utilizará como fecha de inicio el comienzo de la hora actual, si son las 18:27, la hora de inicio será las 18:00 y la hora de final de computación serán las 18:59 del día en el que se realice). Si se guarda la métrica desde esta sección, se guardará con el periódo de calculo utilizado.",
      "PARAGRAPH6": "Tras esta sección de edición volverá a estar disponible la opción de probar la métrica interactuando con Bluejay"
    },
    "REPOSITORYTESTER": {
      "TITLE": "Testeo de repositorios",
      "PARAGRAPH1": "Al entrar en la pantalla, vamos a poder elegir entre dos subpantallas.",
      "PARAGRAPH2": "La primera de ella será la página para clonar un nuevo repositorio. En ella, al inicio hay una sección para añadir o editar el token de github y tras introducir un token válido aparecen todos los repositorios a los que tiene acceso con ese token. Además cada repositorio que aparezca listado tendrá dos opciones, verlo en github para asegurarnos de que es el repositorio que queremos clonar y otra pantalla opción es la de editar que permite clonar el repositorio en local.",
      "PARAGRAPH3": "Por otro lado, si en la pantalla principal de Repository Tester accedemos a repositorios clonados, listará todos los repositorios que hayamos clonado ya, y para cada uno de ellos tendremos 3 opciones, una para crear / eliminar o cambiar de rama. Otra opción para realizar pull requests y otra opción que permitirá crear archivos y realizar commits y pushes.",
      "PARAGRAPH4": "A continuación se pueden ver como son las vistas de las 3 opciones:"
    },
    "TPATESTS": {
      "TITLE": "Testear TPAs",
      "PARAGRAPH1": "Esta seccion permite visualizar los TPAs que ya se encuentran cargados dentro de Bluejay.",
      "PARAGRAPH2": "Si seleccionamos la opción de editar, se podrá editar todo el TPA o se podrá usar un editor que permite editar métrica a métrica o añadir una nueva métrica al TPA fácilando así la edicición del TPA. En esta tabla también podemos encontrar la opción de simplemente ver el TPA o borrarlo (Esto lo borraría de Bluejay directamente)."
    },
    "GLASSMATRIX": {
      "TITLE": "GlassMatrix API",
      "PARAGRAPH1": "Este proyecto tiene su propia API. Esta api se usa tanto para interactuar con la infraestrctura de Bluejay, que permite crear TPAs, probar métricas como para realizar acciones de github en local como clonar repositorios, crear ramas, moverte de ramas, hacer commits o pushes.",
      "APIFUNCTIONS": "Funcionalidades de la API",
      "BLUEJAYINTERACTION": "Permite crear TPAs y probar métricas.",
      "GITHUBACTIONS": "Permite clonar repositorios, crear ramas, cambiar de ramas, hacer commits y pushes.",
      "GITHUBTOKEN": "Para que tanto las acciones de github en local, como las llamadas a la propia API de github funcione correctamente, es necesario tener un token válido de github. Por tanto, Glassmatrix API tiene un método por almacenar este token en el repositorio local (está en un .gitignore) y además permite añadirlo, modificarlo y borrarlo gráficamente. Esta opcion se encuentra disponible en GH Tester -> Clonar nuevo repositorio.",
      "APIDOCS": "Documentación de la API con Swagger",
      "APIDOCS_PARAGRAPH": "Esta API implementa Swagger para tener siempre de una forma todos los endpoints de la API junto con una pequeña documentación del funcionamiento de cada Endpoint. Gracias a Swagger se pueden visualizar todos los endpoints y probarlos en su interfaz gráfica que está disponible en: http://localhost:6012/api-docs/",
      "EXAMPLES": "Ejemplos de uso",
      "EXAMPLES_PARAGRAPH": "A continuación, se presentan algunos ejemplos de como se ve API a través de swagger en donde se pueden ejecutar directamente las llamadas:",
      "BLUEJAYINTERACTION_TITLE": "Interacción con Bluejay",
      "GITHUBACTIONS_TITLE": "Acciones de GitHub en local",
      "GITHUBTOKEN_TITLE": "Guardado Token Github",
      "APIDOCS_TITLE": "Documentación de la API con Swagger",
      "EXAMPLES_TITLE": "Ejemplos de uso"
    },
    "GITHUB": {
      "TITLE": "Interacción con la API de GitHub",
      "WARNING": {
        "TITLE": "¡Atención!",
        "PARAGRAPH1": "Para que esta API funcione correctamente, es necesario introducir el token de GitHub mediante la GlassMatrix API. Solo podrás ver los repositorios a los que tu usuario tenga acceso con ese token.",
        "PARAGRAPH2": "Puedes encontrar más información sobre cómo hacer esto en la página de la GlassMatrix API."
      },
      "PARAGRAPH1": "Este proyecto utiliza la API de GitHub para interactuar con repositorios de GitHub. Esto se hace a través de un servicio Angular llamado GithubService. Aquí hay una descripción de cómo se utilizan algunas de las funciones en este servicio:",
      "FUNCTIONS": {
        "listBranchesForRepo": "Obtiene una lista de todas las ramas de un repositorio específico en GitHub.",
        "getUserName": "Obtiene el nombre de usuario de la persona que está autenticada con el token proporcionado.",
        "listRepos": "Obtiene una lista de todos los repositorios del usuario autenticado.",
        "getLatestCommitSha": "Obtiene el SHA del último commit en un repositorio específico.",
        "getRepoInfo": "Obtiene información sobre un repositorio específico.",
        "createBranch": "Crea una nueva rama en un repositorio específico.",
        "createFile": "Crea un nuevo archivo en un repositorio específico.",
        "createPullRequest": "Crea una nueva solicitud de extracción en un repositorio específico.",
        "getOpenPullRequests": "Obtiene una lista de todas las solicitudes de extracción abiertas en un repositorio específico.",
        "mergePullRequest": "Fusiona una solicitud de extracción específica en un repositorio específico.",
        "getBranches": "Obtiene una lista de todas las ramas en un repositorio específico."
      },
      "TOKEN_CREATION": "Crear un token de acceso personal",
      "TOKEN_CREATION_STEPS": [
        "En la esquina superior derecha de cualquier página de github, haz clic en la foto de tu perfil, luego haz clic en Configuración.",
        "En la barra lateral izquierda, haz clic en Configuración del desarrollador.",
        "En la barra lateral izquierda, haz clic en Tokens de acceso personal.",
        "Haz clic en Generar nuevo token.",
        "En el campo 'Nota', dale a tu token un nombre descriptivo.",
        "Para darle una caducidad a tu token, selecciona Expiración, luego elige una opción predeterminada o haz clic en Personalizado para ingresar una fecha.",
        "Selecciona los ámbitos que te gustaría otorgar a este token. Para usar tu token para acceder a repositorios desde la línea de comandos, selecciona repo. Un token sin ámbitos asignados solo puede acceder a información pública. Para más información, consulta 'Ámbitos para aplicaciones OAuth'.",
        "Haz clic en Generar token.",
        "Opcionalmente, para copiar el nuevo token a tu portapapeles, haz clic en el icono de dos cuadrados superpuestos."
      ],
      "MORE_INFO": "Para más información, visita la documentación oficial de GitHub."
    },
    "BLUEJAY": {
      "TITLE": "Interacción con la API de Bluejay",
      "PARAGRAPH1": "Este proyecto utiliza la API de Bluejay para interactuar con acuerdos. Esto se hace a través de un servicio Angular llamado BluejayService. Aquí hay una descripción de cómo se utilizan algunas de las funciones en este servicio:",
      "PARAGRAPH2": "Para el funcionamiento de todos estas llamadas y de las páginas TPA-Management y Metrics Tester es necesario que esté levantado toda la estructura de Bluejay. Para más información sobre esto, visita ",
      "FUNCTIONS": {
        "createTpa": "Crea un nuevo acuerdo con el contenido proporcionado.",
        "getTps": "Obtiene una lista de todos los acuerdos.",
        "getTpa": "Obtiene un acuerdo específico por su ID.",
        "deleteTpa": "Elimina un acuerdo específico por su ID.",
        "postComputation": "Realiza una petición POST a la API de cálculos con los datos proporcionados.",
        "getComputation": "Obtiene los resultados de un cálculo específico a través de su URL."
      },
      "DOCS_LINK": "http://docs.bluejay.governify.io",
      "DOCS_LINK_TEXT": "la documentación oficial de Bluejay"
    }
  },
  "TPA": {
    "EXISTING_TPAS": "TPAs existentes",
    "ID": "ID",
    "PROJECT": "Proyecto",
    "CLASS": "Clase",
    "OPTIONS": "Opciones",
    "VIEW": "Ver",
    "EDIT": "Editar",
    "DELETE": "Eliminar",
    "CREATE_TPA": "Crear TPA",
    "COPY_DEFAULT_TPA": "Copiar TPA predeterminado",
    "SUCCESS": "Éxito",
    "ERROR": "Error",
    "VIEW": {
      "BACK": "Atrás",
      "TPA_JSON": "TPA JSON:",
      "CONTEXT_SECTION": "Sección de Contexto",
      "CONTEXT_SECTION_DESCRIPTION": "En esta sección, puedes encontrar las partes más importantes del TPA, las métricas y garantías.",
      "METRICS": "MÉTRICAS",
      "GUARANTEES": "GARANTÍAS"
    },
    "EDIT": {
      "WARNING": "Estás a punto de entrar en la pantalla de edición de TPA. Una vez editado, no puedes volver atrás. Para más información, visita:",
      "LINK": "https://docs.bluejay.governify.io/customization/agreement-modeling/team-practices-agreements",
      "EDIT_COMPLETE_TPA": "Editar TPA Completo",
      "EDIT_METRICS_GUARANTEES": "Editar Solo Métricas y Garantías",
      "SECTIONS": {
        "CREATE": "Crear métrica o garantía",
        "BACK": "Atrás",
        "WORK_IN_PROGRESS": "Trabajo en progreso",
        "TPA_JSON": "TPA JSON:",
        "CONTEXT_SECTION": "Sección de Contexto",
        "CONTEXT_SECTION_DESCRIPTION": "En esta sección, puedes encontrar las partes más importantes del TPA, las métricas y garantías.",
        "METRICS": "MÉTRICAS",
        "GUARANTEES": "GARANTÍAS",
        "WARNING": "Es importante que el nombre de la métrica o garantía sea exactamente igual que el id de la métrica o garantía.",
        "METRICS2": "Métricas",
        "NEW_METRIC_NAME": "Nombre de la nueva métrica",
        "NEW_METRIC_CONTENT": "Contenido de la nueva métrica",
        "CREATE_NEW_METRIC": "Crear nueva métrica",
        "COPY_EXAMPLE_METRIC": "Copiar métrica de ejemplo",
        "GUARANTEES2": "Garantías",
        "NEW_GUARANTEE_NAME": "Nombre de la nueva garantía",
        "NEW_GUARANTEE_CONTENT": "Contenido de la nueva garantía",
        "CREATE_NEW_GUARANTEE": "Crear nueva garantía",
        "COPY_EXAMPLE_GUARANTEE": "Copiar garantía de ejemplo"
      },
      "ALL": {
        "TPA_UPDATE": "Actualizar TPA",
        "TPA_JSON": "TPA JSON:"
      }
    },
    "DELETE": {
      "CONFIRM_DELETE": "Confirmar Eliminación",
      "CONFIRM_DELETE_QUESTION": "¿Estás seguro de que quieres eliminar este TPA?",
      "CONFIRM": "Confirmar",
      "TPA_DATA": "DATOS DE TPA"
    }
  },
  "METRICS_TESTER": {
    "ENTER_FILE_NAME": "Introduce el nombre del archivo",
    "SAVE_AS_JSON": "Guardar como JSON",
    "POST": "Publicar",
    "COLLECTING_RESOURCES": "Recopilando recursos de Bluejay",
    "GET_COMPUTATION": "Obtener Cálculo",
    "SEARCH_IN_RESPONSE": "Buscar en la respuesta",
    "SEARCH_IN_RESPONSE_PLACEHOLDER": "Buscar en la respuesta..."
  },
  "METRICS_LOADER": {
    "TITULO1": "Métricas guardadas",
    "TITULO2": "Crear nueva métrica",
    "MESSAGE_TEXT": "{{messageText}}",
    "FILE_NAME": "Nombre del archivo",
    "VIEW_FILE": "Ver archivo",
    "EXECUTE_EDIT_FILE": "Ejecutar / Editar archivo",
    "DELETE_FILE": "Eliminar archivo",
    "NO_METRICS": "No se ha guardado ninguna métrica de un tpa",
    "TPA_METRICS": "Métricas de TPA",
    "INDIVIDUAL_METRICS": "Métricas individuales",
    "VIEWER": {
      "VIEWING": "Estás viendo {{fileName}}."
    },
    "EXECUTOR": {
      "EXECUTING": "Estás ejecutando {{fileName}}.",
      "SAVE_AS_JSON": "Guardar como json",
      "CONTEXT_SECTION": "Sección de Contexto",
      "SCOPE_INFORMATION": "Información de la métrica",
      "PROJECT": "Proyecto",
      "CLASS": "Clase",
      "MEMBER": "Miembro",
      "COMPUTATION_SEARCH": "Período de cálculo",
      "TYPE": "Tipo",
      "PERIOD": "Periodo",
      "INITIAL": "Inicial",
      "FROM": "Desde",
      "END": "Hasta",
      "TIMEZONE": "Zona horaria",
      "ACTUAL_HOUR_COMPUTATION": "Cálculo de hora actual",
      "EXECUTION_SECTION": "Sección de Ejecución",
      "POST": "Publicar",
      "COLLECTING_RESOURCES": "Recopilando recursos de Bluejay",
      "GET_COMPUTATION": "Obtener Cálculo",
      "SEARCH_IN_RESPONSE": "Buscar en la respuesta",
      "SEARCH_IN_RESPONSE_PLACEHOLDER": "Buscar en la respuesta..."
    }
  },
  "GH_SIMULATOR": {
    "ADVER_INFO_1": "Para clonar un nuevo repositorio necesitarás un token válido con acceso a ese repositorio. Para más información, visita:",
    "ADVER_INFO_2": "El token debe ser introducido en la página de clonar nuevo repositorio.",
    "NEW_REPO": "Clonar nuevo repositorio",
    "NEW_REPO_INFO": "Aquí puedes ver todos los repositorios a los que tienes acceso y clonarlos para probar métricas.",
    "CLONED_REPO": "Repositorios clonados",
    "CLONED_REPO_INFO": "Todos los repositorios que has clonado previamente.",
    "REPO_NAME": "Nombre del repositorio",
    "BRANCHES": "Ramas",
    "PR": "Pull Requests",
    "ACTIONS": "Acciones",
    "DELETE": "Eliminar",
    "ISSUES": "Issues",
    "CREATE_ISSUE": "Crear issue",
    "TITLE": "Título:",
    "BODY": "Cuerpo:",
    "CREATE_ISSUE_BUTTON": "Crear issue",
    "ACTIONS_PAGE": {
      "REPO_ACTIONS": "{{repoName}} | Acciones",
      "VIEW_GITHUB": "Ver en GitHub",
      "AVAILABLE_BRANCHES": "Ramas disponibles",
      "BRANCH_NAME": "Nombre de la rama",
      "CURRENT_BRANCH": "Rama actual: {{currentBranch}}",
      "CHANGE_BRANCH": "Cambiar rama",
      "CREATE_NEW_FILE": "Crear nuevo archivo",
      "NEW_FILE_NAME": "Nombre del nuevo archivo",
      "NEW_FILE_CONTENT": "Contenido del nuevo archivo",
      "CREATE_FILE": "Crear archivo",
      "CREATE_NEW_COMMIT": "Crear nuevo commit",
      "COMMIT_MESSAGE": "Mensaje del commit",
      "CREATE_COMMIT": "Crear commit",
      "PUSH_CHANGES": "Hacer push",
      "FILES_IN_REPO": "Archivos en el repositorio",
      "FILE_NAME": "Nombre del archivo"
    },
    "BRANCHES_PAGE": {
      "REPO_NAME": "{{repoName}}",
      "BRANCHES_REPOSITORY": "Ramas del repositorio",
      "NEW_BRANCH_NAME": "Nombre de la nueva rama",
      "CREATE_BRANCH": "Crear rama",
      "DELETE_BRANCH": "Eliminar rama",
      "CHANGE_BRANCH": "Cambiar rama"
    },
    "PR_PAGE": {
      "REPO_NAME": "{{repo}}",
      "CREATE_PR": "Crear Pull Request",
      "PR_INFO": "Base es el repositorio que se actualizará. Los cambios se añadirán a este repositorio a través del pull request. Head: Head es el repositorio que contiene los cambios que se añadirán a la base.",
      "TITLE": "Título:",
      "HEAD": "Head:",
      "BASE": "Base:",
      "BODY": "Cuerpo:",
      "CREATE_PR_BUTTON": "Crear Pull Request",
      "OPEN_PR": "Pull Requests abiertos",
      "NO_PR": "No hay ningún pull request abierto.",
      "MERGE_PR": "Fusionar Pull Request",
      "PR_NUMBER": "Número de Pull Request:",
      "COMMIT_MESSAGE": "Mensaje del commit:",
      "MERGE_PR_BUTTON": "Fusionar Pull Request",
      "PR_NUMBER": "Número:",
      "PR_STATE": "Estado: {{prState}}",
      "PR_CREATED_AT": "Creado en: {{prCreatedAt}}",
      "PR_UPDATED_AT": "Actualizado en: {{prUpdatedAt}}"
    },
    "CLONE_PAGE": {
      "TOKEN_FOUND": "Token encontrado",
      "VIEW_TOKEN": "Ver Token",
      "TOKEN": "Token: {{token}}",
      "EDIT_TOKEN": "Editar Token",
      "ENTER_NEW_TOKEN": "Introducir nuevo token",
      "UPDATE_TOKEN": "Actualizar Token",
      "SAVE_TOKEN": "Guardar Token",
      "KEY_FOUND": "Clave de acceso encontrada",
      "VIEW_KEY": "Ver API key",
      "KEY": "API key: {{key}}",
      "EDIT_KEY": "Editar API key",
      "ENTER_NEW_KEY": "Introducir API key",
      "UPDATE_KEY": "Actualizar API key",
      "SAVE_KEY": "Guardar API key",
      "BE_ENABLED": "Backend activado",
      "BE_DISABLED": "Backend desactivado",
      "ERROR_GETTING_REPOS": "Error obteniendo repositorios. Por favor, comprueba tu token e inténtalo de nuevo.",
      "RATE_LIMIT_ERROR": "Error obteniendo repositorios. Por favor, espera 1h, has superado el límite de peticiones de Github.",
      "REPO_NAME": "Nombre del repositorio",
      "NUM_BRANCHES": "Número de ramas",
      "LAST_UPDATE": "Última actualización",
      "VIEW": "Ver",
      "EDIT": "Editar",
      "REPOSITORY": {
        "REPO_NAME": "{{repoName}}",
        "REPO_DESCRIPTION": "{{repoDescription}}",
        "BRANCHES_TITLE": "Ramas",
        "NEW_BRANCH_NAME": "Nombre de la nueva rama",
        "CREATE_BRANCH": "Crear rama",
        "CLONE_REPOSITORY": "Clonar repositorio",
        "NEW_FILE_NAME": "Nombre del nuevo archivo",
        "FILE_CONTENT": "Contenido del archivo",
        "CREATE_FILE_COMMIT": "Crear archivo y hacer commit"
      }
    }
  },
  "POPUP_METRICS": {
    "title": "Funcionamiento de las métricas",
    "formato_y_funcionamiento": "Formato y funcionamiento de la métrica",
    "config": "config",
    "config_desc": "Contiene la configuración de la métrica. En este caso, `scopeManager` es la URL de bluejay y esto nunca deberá editarse.",
    "metric": "metric",
    "metric_desc": "Contiene la definición de la métrica.",
    "computing": "computing",
    "computing_desc": "Define cómo se calcula la métrica. En este caso, `actual` significa que se calcula en tiempo real.",
    "element": "element",
    "element_desc": "Define el tipo de elemento que se mide. En este caso, `number` significa que se mide un número.",
    "event": "event",
    "event_desc": "Define el evento que dispara el cálculo de la métrica. En este caso, se utiliza una consulta personalizada de GraphQL a la API de GitHub. Esto puede ser modificable como se ve en el apartado inferior de GraphQL custom query",
    "scope": "scope",
    "scope_desc": "Define el alcance de la métrica. En este caso, se mide a nivel de tpa, y para todos los miembros (`*`).",
    "window": "window",
    "window_desc": "Define el período de tiempo para el cual se calcula la métrica. En este caso, se calcula por hora para un día específico.",
    "metrica_de_ejemplo": "Metrica de ejemplo:",
    "consulta_personalizada": "Consulta personalizada de GraphQL",
    "esta_compuesto_por_etapas": "Como se puede ver, está compuesto por 5 etapas diferentes. Estas etapas son altamente configurables y es fácil agregar nuevas etapas.",
    "query3": "Sus tipos pueden comenzar con \"object\", \"objects\" o nada, refiriéndose a si esperan un solo objeto, un array de objetos o nada en la ejecución.",
    "query4": "Sus tipos tienen que terminar con \"object\" o \"objects\", refiriéndose a si después de la ejecución, queda un solo objeto o un array de objetos.",
    "ejemplo_de_configuracion": "Ejemplo de configuración de métrica del collector",
    "tomando_esta_metrica": "Tomando esta métrica simplificada de bluejay:",
    "colector_obtendra_informacion": "El colector obtendrá información de 2 fuentes. Mirando la solicitud de GitHub:",
    "sistema_obtendra_informacion": "El sistema obtendrá la información de los eventos. Yendo a la configuración de los endpoints:",
    "sistema_reemplazara": "El sistema reemplazará %GITHUB.REPO_OWNER% con la información extraída del Scope Manager para el proyecto.",
    "informacion_de_los_eventos": "La información de los eventos corresponde al endpoint /repos/&#123;github.repoOwner}/&#123;github.repository}/events. El sistema sustituirá &#123;github.repoOwner} y &#123;github.repository} con la información extraída del Scope Manager para el proyecto.",
    "elemento_porcentaje": "Mirando la parte más anidada de la métrica podemos ver un elemento %:",
    "configuracion_de_las_sustituciones": "Yendo a la configuración de las sustituciones:",
    "este_metodo_se_creo": "Este método se creó debido a la complejidad de los objetos anidados de GraphQL. Es un método personalizado en el que se ejecutan secuencialmente diferentes pasos para obtener, transformar y devolver datos.",
    "esta_es_una_metrica": "Esta es una métrica para obtener el número de issues asignadas, en una columna llamada 'Doing' dentro de un proyecto de GitHub, para cada miembro:",
    "como_se_puede_ver": "Como se puede ver, está compuesto por 5 etapas diferentes. Estas etapas son altamente configurables y es fácil agregar nuevas etapas.",
    "querys": "Querys",
    "las_diferentes_etapas": "Las diferentes etapas se dan dentro de la clave steps dentro del objeto custom. Cada etapas tiene que estar dentro de un objeto numerado ya que se realizarán en orden creciente.",
    "las_etapas_se_diferencian": "Las etapas se diferencian por su tipo. Estos tipos de etapas siguen un patrón simple para una mejor concatenación de etapas.",
    "tipo_de_etapa_queryGetObject": "Tipo de etapa: queryGetObject y queryGetObjects",
    "estas_etapas_no_esperan": "Estas etapas no esperan nada y devuelven un objeto o un array de objetos. Hacen lo mismo, pero ambos tipos son correctos para una mejor lectura del DSL.",
    "estas_etapas_esperan": "Estas etapas esperan un solo objeto y devuelven un objeto o un array de objetos. Hacen lo mismo, pero ambos tipos son correctos para una mejor lectura del DSL.",
    "obtiene_el_los_objeto_s": "Obtiene el/los objeto/s dentro de un objeto. La ubicación del/los objeto/s se especifica como si se navegara a través de javascript.",
    "tipo_de_etapas_objectsFilterObject": "Tipo de etapas: objectsFilterObject y objectsFilterObjects",
    "estas_etapas_esperan_un_array": "Estas etapas esperan un array de cero o más objetos y devuelven un objeto o un array de objetos.",
    "se_requiere_un_array": "Se requiere un array de filtros con una o más cadenas. Estas cadenas son ecuaciones. La parte izquierda contiene la ubicación del atributo en los diferentes objetos para comparar y la parte derecha el valor que se espera que tenga el atributo obtenido.",
    "si_el_filtro_es_objectsFilterObject": "Si el filtro es objectsFilterObject, se espera un parámetro 'keep' ya que varios objetos pueden ser recuperados del filtro y solo uno puede permanecer. first, last, min, max, sum, avg son las opciones válidas.",
    "si_el_filtro_es_objectsFilterObjects": "Si el filtro es objectsFilterObjects, ya no se necesita el parámetro keep.",
    "aqui_se_puede_incluir": "Aquí, se puede incluir información sobre los miembros para comparar, por ejemplo, el contenido de una clave de objeto para que sea el nombre de usuario de un usuario de github, como se puede ver en el ejemplo.",
    "tipo_de_etapas_runScript": "Tipo de etapas: runScript",
    "esta_etapas_espera_cualquier_cosa": "Esta etapas espera cualquier cosa y se pasa a una función exportada como genérica. Se espera que devuelva una respuesta en forma de un objeto/array u otro tipo en caso de que sea compatible con la métrica.",
    "a_la_fecha_puede_recibir": "A la fecha puede recibir dos parámetros:",
    "script_es_una_funcion": "script: Es una función exportada como genérica y recibe dos entradas: los datos que se filtran/obtienen de las etapas ejecutados antes de ella y un objeto que contiene variables para generalizar el script y modificar diferentes filtros/condiciones dentro del script. Debe devolver los datos procesados para pasar al siguiente pipeline o para ser devueltos. Este script tiene que ser escapado para caber en el TPA como un JSON.",
    "variables_este_es_el_objeto": "variables: Este es el objeto que se pasa al script que contiene la variabilización. El colector también añadirá al objeto dos claves (from, to) que contienen la ventana para filtrar la información.",
    "este_es_un_ejemplo": "Este es un ejemplo de un script sin ser escapado:",
    "toma_datos_de_la_API": "Toma datos de la API de GitHub GQL que contiene información sobre las tarjetas (movimientos de tarjetas de proyecto - columna antigua y nueva columna) y aplica filtros basados en las variables que se le pasan. La etapa se vería así:",
    "como_se_puede_ver_2": "Como se puede ver, filtrará y mantendrá los issues cuyas tarjetas se hayan movido de una columna llamada 'In progress' a una columna llamada 'In review'. También utilizará el from y el to para filtrar los datos.",
    "CLOSE": "Cerrar"
  },
  "section": {
    "example1": "Ramas del repositorio",
    "example2": "Crear rama",
    "example3": "Eliminar rama",
    "example4": "Ver incidencias",
    "example5": "Crear incidencias",
    "example6": "Crear PR",
    "example7": "PRs abiertas",
    "example8": "Fusionar una PR",
    "example9": "Hacer pull de la rama",
    "example10": "Crear archivo",
    "example11": "Hacer commit",
    "example12": "Hacer push",
    "example13": "Calcular métricas de TPA",
    "example14": "Calcular métrica",
    "example15": "Verificar en la respuesta",
    "example16": "Fusionar la última PR creada",
    "example17": "Verificar en la respuesta 2",
    "example18": "Eliminar archivo",
    "example19": "Eliminar repositorio",
    "example20": "Cambiar rama",
    "example21": "Crear nueva rama",
    "example22": "Antigua verificación en la respuesta",
    "example23": "Clonar repositorio",
    "example24": "Información de un repositorio",
    "example25": "Lista de repositorios",
    "example26": "Ramas del repositorio de GitLab",
    "example27": "Crear rama de GitLab",
    "example28": "Eliminar rama de GitLab",
    "example29": "Ver incidencias de Jira",
    "example30": "Crear incidencias de Jira",
    "example31": "Crear MR de GitLab",
    "example32": "MRs de GitLab abiertas",
    "example33": "Fusionar una MR de GitLab",
    "example34": "Hacer pull de la rama de GitLab",
    "example35": "Crear archivo de GitLab",
    "example36": "Hacer commit de GitLab",
    "example37": "Hacer push de GitLab",
    "example38": "Fusionar la última MR de GitLab creada",
    "example39": "Eliminar archivo de GitLab",
    "example40": "Eliminar repositorio de GitLab",
    "example41": "Cambiar rama de GitLab",
    "example42": "Crear nueva rama de GitLab",
    "example43": "Clonar repositorio de GitLab",
    "example44": "Información de un repositorio de GitLab",
    "example45": "Lista de repositorios de GitLab",
    "example46": "Editar incidencia de Jira",
    "example47": "Mover incidencia de Jira"
  },
  "TESTS": {
    "title": "Testeo de métricas con yaml",
    "copy": "Copiar abajo",
    "ejecucion": "Zona de ejecución",
    "guardar": "Guardar",
    "formato": "Establecer formato",
    "ejecutar": "Lanzar tests",
    "ejemplos": "Ejemplos",
    "viendo": "Estas viendo el archivo:",
    "actualizar": "Actualizar archivo",
    "fixed": "Usando ventana fija",
    "yes": "Sí",
    "no": "No",
    "FIXEDWINDOW_HELP": "Uso de ventana fija",
    "FIXEDWINDOW_EXPLANATION": "Por defecto, el tester automático de métricas cambia la ventana de tiempo de todas las métricas a la ventana actual, de acuerdo con el periodo de cada métrica (por ejemplo, la semana actual o el mes actual). Si quieres usar la ventana de tiempo original de la métrica, puedes cambiar este comportamiento añadiendo el siguiente fragmento al script de test:"
  },
  "CONFIG": {
    "DOCKER_ACTIVE": "Docker activos",
    "WARNING_MESSAGE": "Si esta página se está ejecutando en un contenedor docker, no se podrán ver el resto de dockers activos.",
    "CLOSE": "Cerrar",
    "CONTAINER_ID": "ID del Contenedor",
    "CONTAINER_NAME": "Nombre del Contenedor",
    "URL": "URL",
    "PORT": "Puerto",
    "GITHUB_TOKEN": "Github Token",
    "GITLAB_TOKEN": "GitLab Token",
    "JIRA_TOKEN": "Jira Token",
    "ACCESS_KEY": "API key",
    "HOW_TO_GET_TOKEN": "Cómo obtener un token de GitHub",
    "HELP": "Ayuda",
    "SWAGGER": "OpenAPI Specification",
    "SWAGGER_DESCRIPTION": "Se utiliza Swagger, una herramienta utilizada para diseñar, construir, documentar y utilizar servicios web RESTful. Permite a los desarrolladores y usuarios entender y trabajar con una API de servicio web de una manera más fácil y visual.",
    "SWAGGER_DESCRIPTION_2": "Desde swagger se pueden realizar las llamadas a la propia API y comprobar su correcto funcionamiento sin necesidad de otras aplicaciones como Postman.",
    "OPEN_SWAGGER": "Abrir OAS (Swagger)",
    "DOCUMENTATION": "Documentación",
    "OPEN_PDF_NEW_TAB": "Abrir PDF en nueva pestaña",
    "CONSTANTS": "Constantes",
    "BASE_URL": "URL Base",
    "DEFAULT_COLLECTOR": "Colector Predeterminado",
    "AGREEMENTS_URL": "URL de Acuerdos",
    "COLLECTOR_EVENTS_URL": "URL de Eventos del Colector",
    "SCOPES_URL": "URL de Alcances",
    "UPDATE": "Actualizar",
    "MESSAGE": "Deberías reiniciar el servidor para aplicar los cambios"
  }
}
