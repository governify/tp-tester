{
  "COMMON": {
    "BACK": "Back",
    "SEARCH": "Search",
    "SEARCH_PLACEHOLDER": "Search..."
  },
  "HOME": {
    "HOMEPAGE": {
    "TITLE": "Bluejay - TP Tester",
    "INTRO_PARAGRAPH": "This project is an extension of Bluejay. The official documentation of Bluejay can be found at: <a href='https://docs.bluejay.governify.io/' target='_blank'>docs.bluejay.governify.io</a>. Being an extension of Bluejay, it is essential for the complete operation of Bluejay-Tester.",
    "INTRODUCTION_TITLE": "Introduction",
    "WHAT_IS_BLUEJAY_TITLE": "What is Bluejay?",
    "WHAT_IS_BLUEJAY_DESCRIPTION": "Bluejay Infrastructure is a Governify-based infrastructure that allows auditing agile teams easily. It consists of a subset of Governify microservices that can be deployed either on a single machine or a cluster. Bluejay accesses multiple sources to gather information about development teams, such as GitLab, Jira, Slack, etc., and uses this information to verify if those teams comply with a Team Practice Agreement (TPA) that includes metrics and guarantees related to agile methodology.",
    "WHAT_IS_TPT_TITLE": "What is Bluejay-TP Tester for?",
    "WHAT_IS_TPT_DESCRIPTION": "The purpose of this TP-Tester is, as its name suggests, to be able to test the metrics that make up the TPs (Team Practices) first. Once it is confirmed that these metrics work correctly, TP-Tester allows you to verify that the entire TPA (Team Practice Agreement) works correctly. For this, TPAs that are directly in Bluejay can be added, removed, or modified from this TP Tester.",
    "GETTING_STARTED_TITLE": "Getting Started",
    "DEVELOPMENT_MODE_TITLE": "Development Mode",
    "DEVELOPMENT_MODE_STEPS": "To start Bluejay-TP Tester in development mode, follow these steps:",
    "DEVELOPMENT_MODE_STEP_1": "Clone the Bluejay-TP Tester repository.",
    "DEVELOPMENT_MODE_STEP_2": "Install dependencies with `npm install`.",
    "DEVELOPMENT_MODE_STEP_3": "Start the project with `ng start`.",
    "DEVELOPMENT_MODE_DESCRIPTION": "This should suffice as the project uses concurrently and simultaneously starts the express server and angular. The Express server (GlassMatrix API) is running on port 6012 and the Angular application on port 4200.",
    "DOCKER_MODE_TITLE": "With Docker",
    "DOCKER_MODE_STEPS": "To start Bluejay-TP Tester with docker, follow these steps:",
    "DOCKER_MODE_STEP_1": "Clone the Bluejay-TP Tester repository.",
    "DOCKER_MODE_STEP_2": "Run `docker-compose up --build`.",
    "DOCKER_MODE_DESCRIPTION": "With this, we would already have the project running on port 6011 the angular web, and the express server on port 6012."
  },
  "LANGS": {
    "TITLE": "Bluejay - TP Tester",
    "INTRO_PARAGRAPH": "Thanks to the ngx-translate library (<a href='https://github.com/ngx-translate/core' target='_blank'>github.com/ngx-translate/core</a>). By default, TP Tester will be in the language of the browser. This library also allows adding translations in a simple way since it would be enough to translate the Json from one language to another, and no other type of file would need to be modified.",
    "JSON_EXAMPLE_TITLE": "Here is a snippet of how the language .json works:",
    "JSON_EXAMPLE_CONTENT": "\"METRICS_LOADER\": {\\n  \\\"TITLE1\\\": \\\"Saved metrics\\\",\\n  \\\"TITLE2\\\": \\\"Create new metric\\\",\\n  \\\"MESSAGE_TEXT\\\": \\\"No saved metrics\\\",\\n  \\\"FILE_NAME\\\": \\\"File name\\\",\\n  \\\"VIEW_FILE\\\": \\\"View file\\\",\\n  \\\"EXECUTE_EDIT_FILE\\\": \\\"Execute / Edit file\\\",\\n  \\\"DELETE_FILE\\\": \\\"Delete file\\\",\\n  \\\"VIEWER\\\": {\\n    \\\"VIEWING\\\": \\\"fileName.\\\"\\n  }\\n}",
    "JSON_EXPLANATION": "In this snippet, each key represents a text string that will be displayed in the application. Therefore, you would only need to change the content of the text strings and leave the keys unchanged to translate to other languages.",
    "LANGUAGE_CHANGE_INFO": "Additionally, if you do not want to use the default language of the browser, you can change between the two current languages, Spanish or English, in the upper corner of the screen."
  },
  "METRICSTESTS": {
    "TITLE": "Testing Metrics",
    "PARAGRAPH1": "To test metrics, first, you will need to access the metrics tester page. First, there is a section where you can perform actions with the metrics already saved. At the bottom, you can test a new metric.",
    "PARAGRAPH2": "By default, there will be a metric in the area to create a new metric. This metric is simply an example and is fully editable or can be directly deleted and replaced with a new one.",
    "PARAGRAPH3": "Once we have entered the metric we want to test, we have to click publish. This will interact with the Bluejay endpoint, and after obtaining the initial computation, the button to get calculation will be unlocked. This will take a few seconds and return the values of the metrics we are testing in that repository.",
    "PARAGRAPH4": "Once we have checked the metric (or before if you wish), there will also be a button to save the metric and have it always available in the local repository with the name we want. When we have it saved, it can already be accessed from the upper section, and we can re-run, edit, or delete it.",
    "SUBTITLE": "Metric Edition",
    "PARAGRAPH5": "If in the first section we access to edit metrics, we will enter a page like the one below. This page has the option to use the current time (it will use the start of the current hour as the start date, if it is 18:27, the start time will be 18:00 and the end time of computation will be 18:59 of the day on which it is performed). If the metric is saved from this section, it will be saved with the calculation period used.",
    "PARAGRAPH6": "After this editing section, the option to test the metric by interacting with Bluejay will be available again."
  },
  "REPOSITORYTESTER": {
    "TITLE": "Repository Testing",
    "PARAGRAPH1": "Upon entering the screen, we will be able to choose between two sub-screens.",
    "PARAGRAPH2": "The first one will be the page to clone a new repository. Here, at the beginning, there is a section to add or edit the GitHub token, and after entering a valid token, all repositories accessible with that token will appear. Additionally, each listed repository will have two options: to view it on GitHub to ensure it is the repository we want to clone, and another option is the edit screen that allows cloning the repository locally.",
    "PARAGRAPH3": "On the other hand, if we access cloned repositories on the main screen of Repository Tester, it will list all repositories we have already cloned, and for each of them, we will have 3 options: one to create/delete or change branches. Another option to make pull requests, and another option that will allow creating files and making commits and pushes.",
    "PARAGRAPH4": "Below, you can see what the views of the 3 options are like:"
  },
  "TPATESTS": {
    "TITLE": "Testing TPAs",
    "PARAGRAPH1": "This section allows visualizing the TPAs that are already loaded into Bluejay.",
    "PARAGRAPH2": "If we select the edit option, we can edit the entire TPA or use an editor that allows editing metric by metric or adding a new metric to the TPA, thus facilitating TPA editing. In this table, we can also find the option to simply view the TPA or delete it (this would delete it directly from Bluejay)."
  },
    "GLASSMATRIX": {
      "TITLE": "GlassMatrix API",
      "PARAGRAPH1": "This project has its own API. This API is used both to interact with the Bluejay infrastructure, allowing you to create TPAs and test metrics, and to perform GitHub actions locally, such as cloning repositories, creating branches, switching branches, committing, or pushing.",
      "APIFUNCTIONS": "API Functions",
      "BLUEJAYINTERACTION": "Allows creating TPAs and testing metrics.",
      "GITHUBACTIONS": "Allows cloning repositories, creating branches, switching branches, committing, and pushing.",
      "GITHUBTOKEN": "For both GitHub actions locally and calls to the GitHub API itself to work correctly, a valid GitHub token is required. Therefore, the GlassMatrix API has a method for storing this token in the local repository (it is in a .gitignore) and also allows adding, modifying, and deleting it graphically. This option is available in GH Tester -> Clone new repository.",
      "APIDOCS": "API Documentation with Swagger",
      "APIDOCS_PARAGRAPH": "This API implements Swagger to always have all the API endpoints clearly with a brief documentation of how each endpoint works. Thanks to Swagger, all endpoints can be viewed and tested in its graphical interface, which is available at: http://localhost:6012/api-docs/",
      "EXAMPLES": "Usage Examples",
      "EXAMPLES_PARAGRAPH": "Below are some examples of how the API looks through Swagger, where calls can be executed directly:",
      "BLUEJAYINTERACTION_TITLE": "Interaction with Bluejay",
      "GITHUBACTIONS_TITLE": "GitHub Actions Locally",
      "GITHUBTOKEN_TITLE": "GitHub Token Storage",
      "APIDOCS_TITLE": "API Documentation with Swagger",
      "EXAMPLES_TITLE": "Usage Examples"
    },
  "GITHUB": {
    "TITLE": "Interaction with GitHub API",
    "WARNING": {
      "TITLE": "Attention!",
      "PARAGRAPH1": "For this API to work correctly, it is necessary to enter the GitHub token through the GlassMatrix API. You will only be able to see the repositories that your user has access to with that token.",
      "PARAGRAPH2": "You can find more information on how to do this on the GlassMatrix API page."
    },
    "PARAGRAPH1": "This project uses the GitHub API to interact with GitHub repositories. This is done through an Angular service called GithubService. Here is a description of how some of the functions in this service are used:",
    "FUNCTIONS": {
      "listBranchesForRepo": "Gets a list of all branches of a specific repository on GitHub.",
      "getUserName": "Gets the username of the person authenticated with the provided token.",
      "listRepos": "Gets a list of all repositories of the authenticated user.",
      "getLatestCommitSha": "Gets the SHA of the latest commit in a specific repository.",
      "getRepoInfo": "Gets information about a specific repository.",
      "createBranch": "Creates a new branch in a specific repository.",
      "createFile": "Creates a new file in a specific repository.",
      "createPullRequest": "Creates a new pull request in a specific repository.",
      "getOpenPullRequests": "Gets a list of all open pull requests in a specific repository.",
      "mergePullRequest": "Merges a specific pull request in a specific repository.",
      "getBranches": "Gets a list of all branches in a specific repository."
    },
    "TOKEN_CREATION": "Create a personal access token",
    "TOKEN_CREATION_STEPS": [
      "In the top right corner of any page, click on your profile picture, then click on Settings.",
      "In the left sidebar, click on Developer settings.",
      "In the left sidebar, click on Personal access tokens.",
      "Click on Generate new token.",
      "In the 'Note' field, give your token a descriptive name.",
      "To give your token an expiration, select Expiration, then choose a default option or click Custom to enter a date.",
      "Select the scopes you would like to grant to this token. To use your token to access repositories from the command line, select repo. A token without assigned scopes can only access public information. For more information, see 'Scopes for OAuth Apps'.",
      "Click on Generate token.",
      "Optionally, to copy the new token to your clipboard, click on the icon of two overlapping squares."
    ],
    "MORE_INFO": "For more information, visit the official GitHub documentation."
  },
  "BLUEJAY": {
    "TITLE": "Interaction with Bluejay API",
    "PARAGRAPH1": "This project uses the Bluejay API to interact with agreements. This is done through an Angular service called BluejayService. Here is a description of how some of the functions in this service are used:",
    "PARAGRAPH2": "For the operation of all these calls and the TPA-Management and Metrics Tester pages, it is necessary that the entire Bluejay structure is up and running. For more information on this, visit ",
    "FUNCTIONS": {
      "createTpa": "Creates a new agreement with the provided content.",
      "getTps": "Gets a list of all agreements.",
      "getTpa": "Gets a specific agreement by its ID.",
      "deleteTpa": "Deletes a specific agreement by its ID.",
      "postComputation": "Makes a POST request to the calculations API with the provided data.",
      "getComputation": "Gets the results of a specific calculation through its URL."
    },
    "DOCS_LINK": "http://docs.bluejay.governify.io",
    "DOCS_LINK_TEXT": "the official Bluejay documentation"
  }
  },
  "TPA": {
    "EXISTING_TPAS": "Existings TPAs",
    "ID": "ID",
    "PROJECT": "Project",
    "CLASS": "Class",
    "OPTIONS": "Options",
    "VIEW": "View",
    "EDIT": "Edit",
    "DELETE": "Delete",
    "CREATE_TPA": "Create TPA",
    "COPY_DEFAULT_TPA": "Copy Default TPA",
    "SUCCESS": "Success",
    "ERROR": "Error",
    "VIEW": {
      "TPA_JSON": "TPA JSON:",
      "CONTEXT_SECTION": "Context Section",
      "CONTEXT_SECTION_DESCRIPTION": "In this section, you can found the most importants parts of the TPA, the metrics and guarantees.",
      "METRICS": "METRICS",
      "GUARANTEES": "GUARANTEES"
    },
    "EDIT": {
      "WARNING": "You are about to enter the TPA editing screen. Once edited, you cannot go back. For more information, visit:",
      "LINK": "https://docs.bluejay.governify.io/customization/agreement-modeling/team-practices-agreements",
      "EDIT_COMPLETE_TPA": "Edit Complete TPA",
      "EDIT_METRICS_GUARANTEES": "Edit Metrics and Guarantees Only",
      "SECTIONS": {
        "CREATE": "Create metric or guarantee",
        "WORK_IN_PROGRESS": "Work in Progress",
        "TPA_JSON": "TPA JSON:",
        "CONTEXT_SECTION": "Context Section",
        "CONTEXT_SECTION_DESCRIPTION": "In this section, you can found the most importants parts of the TPA, the metrics and guarantees.",
        "METRICS": "METRICS",
        "GUARANTEES": "GUARANTEES",
        "WARNING": "It is important that the name of the metric or guarantee is exactly the same as the id of the metric or guarantee.",
        "METRICS2": "Metrics",
        "NEW_METRIC_NAME": "Name of the new metric",
        "NEW_METRIC_CONTENT": "Content of the new metric",
        "CREATE_NEW_METRIC": "Create new metric",
        "COPY_EXAMPLE_METRIC": "Copy example metric",
        "GUARANTEES2": "Guarantees",
        "NEW_GUARANTEE_NAME": "Name of the new guarantee",
        "NEW_GUARANTEE_CONTENT": "Content of the new guarantee",
        "CREATE_NEW_GUARANTEE": "Create new guarantee",
        "COPY_EXAMPLE_GUARANTEE": "Copy example guarantee"
      },
      "ALL": {
        "TPA_UPDATE": "TPA Update",
        "TPA_JSON": "TPA JSON:"
      }
    },
    "DELETE": {
      "CONFIRM_DELETE": "Confirm Delete",
      "CONFIRM_DELETE_QUESTION": "Are you sure to delete this TPA?",
      "CONFIRM": "Confirm",
      "TPA_DATA": "TPA DATA"
    }

  },
  "METRICS_TESTER": {

    "ENTER_FILE_NAME": "Enter file name",
    "SAVE_AS_JSON": "Save as JSON",
    "POST": "Post",
    "COLLECTING_RESOURCES": "Collecting resources from Bluejay",
    "GET_COMPUTATION": "Get Computation",
    "SEARCH_IN_RESPONSE": "Search in Response",
    "SEARCH_IN_RESPONSE_PLACEHOLDER": "Search in response..."
  },
  "METRICS_LOADER": {
    "TITULO1": "Saved metrics",
    "TITULO2": "Create new metric",
    "MESSAGE_TEXT": "{{messageText}}",
    "FILE_NAME": "File Name",
    "VIEW_FILE": "View File",
    "EXECUTE_EDIT_FILE": "Execute / Edit File",
    "DELETE_FILE": "Delete File",
    "NO_METRICS": "No saved TPA metrics",
    "TPA_METRICS": "TPA Metrics",
    "INDIVIDUAL_METRICS": "Individual Metrics",
    "VIEWER": {
      "VIEWING": "You are viewing {{fileName}}."
    },
    "EXECUTOR": {
      "EXECUTING": "You are editing the file: {{fileName}}.",
      "SAVE_AS_JSON": "Save as json",
      "CONTEXT_SECTION": "Context Section",
      "SCOPE_INFORMATION": "Scope Information",
      "PROJECT": "Project",
      "CLASS": "Class",
      "MEMBER": "Member",
      "COMPUTATION_SEARCH": "Computation Search",
      "TYPE": "Type",
      "PERIOD": "Period",
      "INITIAL": "Initial",
      "FROM": "From",
      "END": "End",
      "TIMEZONE": "Timezone",
      "ACTUAL_HOUR_COMPUTATION": "Actual hour computation",
      "EXECUTION_SECTION": "Execution Section",
      "POST": "Post",
      "COLLECTING_RESOURCES": "Collecting resources from Bluejay",
      "GET_COMPUTATION": "Get Computation",
      "SEARCH_IN_RESPONSE": "Search in response",
      "SEARCH_IN_RESPONSE_PLACEHOLDER": "Search in response..."
    }
  },
  "GH_SIMULATOR": {
    "ADVER_INFO_1": "To clone a new repository you will need a valid token with access to that repository. For more information, visit:",
    "ADVER_INFO_2": "The token must be introduced in the clone new repository page.",
    "NEW_REPO": "Clone new repository",
    "NEW_REPO_INFO": "Here you can see all the repositories in which you have access and clone them to test metrics.",
    "CLONED_REPO": "Cloned repositories",
    "CLONED_REPO_INFO": "All the repositories that you have previously cloned.",
    "REPO_NAME": "Repository name",
    "BRANCHES": "Branches",
    "PR": "Pull Requests",
    "ACTIONS": "Actions",
    "DELETE": "Delete",
    "ISSUES": "Issues",
    "CREATE_ISSUE": "Create Issue",
    "TITLE": "Title:",
    "BODY": "Body:",
    "CREATE_ISSUE_BUTTON": "Create Issue",
    "ACTIONS_PAGE": {
      "REPO_ACTIONS": "{{repoName}} | Actions",
      "VIEW_GITHUB": "View in GitHub",
      "AVAILABLE_BRANCHES": "Available Branches",
      "BRANCH_NAME": "Branch Name",
      "CURRENT_BRANCH": "Current Branch: {{currentBranch}}",
      "CHANGE_BRANCH": "Change Branch",
      "CREATE_NEW_FILE": "Create New File",
      "NEW_FILE_NAME": "New file name",
      "NEW_FILE_CONTENT": "New file content",
      "CREATE_FILE": "Create File",
      "CREATE_NEW_COMMIT": "Create New Commit",
      "COMMIT_MESSAGE": "Commit message",
      "CREATE_COMMIT": "Create Commit",
      "PUSH_CHANGES": "Push",
      "FILES_IN_REPO": "Files in Repository",
      "FILE_NAME": "File Name"
    },
    "BRANCHES_PAGE": {
      "REPO_NAME": "{{repoName}}",
      "BRANCHES_REPOSITORY": "Branches Repository",
      "NEW_BRANCH_NAME": "New branch name",
      "CREATE_BRANCH": "Create Branch",
      "DELETE_BRANCH": "Delete Branch",
      "CHANGE_BRANCH": "Change Branch"
    },
    "PR_PAGE": {
      "REPO_NAME": "{{repo}}",
      "CREATE_PR": "Create Pull Request",
      "PR_INFO": "Base is the repository that will be updated. Changes will be added to this repository via the pull request. Head: Head is the repository containing the changes that will be added to the base.",
      "TITLE": "Title:",
      "HEAD": "Head:",
      "BASE": "Base:",
      "BODY": "Body:",
      "CREATE_PR_BUTTON": "Create Pull Request",
      "OPEN_PR": "Open Pull Requests",
      "NO_PR": "There is not any pull request open.",
      "MERGE_PR": "Merge Pull Request",
      "PR_NUMBER": "Pull Request Number:",
      "COMMIT_MESSAGE": "Commit Message:",
      "MERGE_PR_BUTTON": "Merge Pull Request",
      "PR_NUMBER": "Number:",
      "PR_STATE": "State: {{prState}}",
      "PR_CREATED_AT": "Created at: {{prCreatedAt}}",
      "PR_UPDATED_AT": "Updated at: {{prUpdatedAt}}"
    },
    "CLONE_PAGE": {
      "TOKEN_FOUND": "Token found",
      "VIEW_TOKEN": "View Token",
      "TOKEN": "Token: {{token}}",
      "EDIT_TOKEN": "Edit Token",
      "ENTER_NEW_TOKEN": "Enter new token",
      "UPDATE_TOKEN": "Update Token",
      "SAVE_TOKEN": "Save Token",
      "KEY_FOUND": "Access key found",
      "VIEW_KEY": "View API key",
      "KEY": "API key: {{key}}",
      "EDIT_KEY": "Edit API key",
      "ENTER_NEW_KEY": "Enter new API key",
      "UPDATE_KEY": "Update API key",
      "SAVE_KEY": "Save key",
      "BE_ENABLED": "Backend enabled",
      "BE_DISABLED": "Backend disabled",
      "ERROR_GETTING_REPOS": "Error getting repositories. Please check your token and try again.",
      "RATE_LIMIT_ERROR": "Error getting repositories. Please check wait 1h, you overpass the Github rate limit.",
      "REPO_NAME": "Repository Name",
      "NUM_BRANCHES": "Number of Branches",
      "LAST_UPDATE": "Last Update",
      "VIEW": "View",
      "EDIT": "Edit",
      "REPOSITORY": {
        "REPO_NAME": "{{repoName}}",
        "REPO_DESCRIPTION": "{{repoDescription}}",
        "BRANCHES_TITLE": "Branches",
        "NEW_BRANCH_NAME": "New branch name",
        "CREATE_BRANCH": "Create Branch",
        "CLONE_REPOSITORY": "Clone Repository",
        "NEW_FILE_NAME": "New file name",
        "FILE_CONTENT": "File content",
        "CREATE_FILE_COMMIT": "Create File and Commit"
      }
    }
  },
  "POPUP_METRICS": {
    "title": "Operation of the Metrics",
    "formato_y_funcionamiento": "Format and Operation of the Metric",
    "config": "config",
    "config_desc": "Contains the configuration of the metric. In this case, `scopeManager` is the URL of Bluejay and this should never be edited.",
    "metric": "metric",
    "metric_desc": "Contains the definition of the metric.",
    "computing": "computing",
    "computing_desc": "Defines how the metric is calculated. In this case, `actual` means it is calculated in real-time.",
    "element": "element",
    "element_desc": "Defines the type of element being measured. In this case, `number` means a number is measured.",
    "event": "event",
    "event_desc": "Defines the event that triggers the calculation of the metric. In this case, a custom GraphQL query to the GitHub API is used. This can be modified as seen in the GraphQL custom query section below.",
    "scope": "scope",
    "scope_desc": "Defines the scope of the metric. In this case, it is measured at the TPA level, and for all members (`*`).",
    "window": "window",
    "window_desc": "Defines the time period for which the metric is calculated. In this case, it is calculated hourly for a specific day.",
    "metric_example": "Example Metric:",
    "metrica_de_ejemplo": "Custom GraphQL Query",
    "esta_compuesto_por_etapas": "As you can see, it is composed of 5 different stages. These stages are highly configurable and it's easy to add new ones.",
    "query3": "Its types can start with \"object\", \"objects\", or nothing, referring to whether they expect a single object, an array of objects, or nothing in execution.",
    "query4": "Its types have to end with \"object\" or \"objects\", referring to whether after execution, a single object or an array of objects remains.",
    "ejemplo_de_configuracion": "Example Configuration of the Collector Metric",
    "tomando_esta_metrica": "Taking this simplified metric from Bluejay:",
    "colector_obtendra_informacion": "The collector obtains information from 2 sources. Looking at the GitHub request:",
    "sistema_obtendra_informacion": "The system will obtain information from the events. Going to the endpoint configurations:",
    "sistema_reemplazara": "The system will replace %GITHUB.REPO_OWNER% with the information extracted from the Scope Manager for the project.",
    "informacion_de_los_eventos": "The event information corresponds to the endpoint /repos/&#123;github.repoOwner}/&#123;github.repository}/events. The system will replace &#123;github.repoOwner} and &#123;github.repository} with the information extracted from the Scope Manager for the project.",
    "elemento_porcentaje": "Looking at the most nested part of the metric, we can see a percentage element:",
    "configuracion_de_las_sustituciones": "Going to the substitutions configuration:",
    "este_metodo_se_creo": "This method was created due to the complexity of nested GraphQL objects. It is a custom method where different steps are executed sequentially to obtain, transform, and return data.",
    "esta_es_una_metrica": "This is a metric to obtain the number of issues assigned, in a column called 'Doing' within a GitHub project, for each member:",
    "como_se_puede_ver": "As you can see, it is composed of 5 different stages. These stages are highly configurable and it's easy to add new ones.",
    "querys": "Queries",
    "las_diferentes_etapas": "The different stages are given within the steps key inside the custom object. Each stage must be within a numbered object as they will be performed in increasing order.",
    "las_etapas_se_diferencian": "The stages are differentiated by their type. These stage types follow a simple pattern for better stage concatenation.",
    "tipo_de_etapa_queryGetObject": "Stage Type: queryGetObject and queryGetObjects",
    "estas_etapas_no_esperan": "These stages do not expect anything and return an object or an array of objects. They do the same thing, but both types are correct for better DSL reading.",
    "estas_etapas_esperan": "These stages expect a single object and return an object or an array of objects. They do the same thing, but both types are correct for better DSL reading.",
    "obtiene_el_los_objeto_s": "Gets the object/s within an object. The location of the object/s is specified as if navigating through JavaScript.",
    "tipo_de_etapas_objectsFilterObject": "Stage Type: objectsFilterObject and objectsFilterObjects",
    "estas_etapas_esperan_un_array": "These stages expect an array of zero or more objects and return an object or an array of objects.",
    "se_requiere_un_array": "An array of filters with one or more strings is required. These strings are equations. The left part contains the location of the attribute in the different objects to compare and the right part the value expected to have the obtained attribute.",
    "si_el_filtro_es_objectsFilterObject": "If the filter is objectsFilterObject, a 'keep' parameter is expected as multiple objects can be retrieved from the filter and only one can remain. first, last, min, max, sum, avg are the valid options.",
    "si_el_filtro_es_objectsFilterObjects": "If the filter is objectsFilterObjects, the 'keep' parameter is no longer needed.",
    "aqui_se_puede_incluir": "Here, you can include information about the members to compare, for example, the content of an object key to be the GitHub user's username, as seen in the example.",
    "tipo_de_etapas_runScript": "Stage Type: runScript",
    "esta_etapas_espera_cualquier_cosa": "This stage expects anything and is passed to a function exported as generic. It is expected to return a response in the form of an object/array or another type if it is compatible with the metric.",
    "a_la_fecha_puede_recibir": "To date, it can receive two parameters:",
    "script_es_una_funcion": "script: It is a function exported as generic and receives two inputs: the data filtered/retrieved from the stages executed before it and an object containing variables to generalize the script and modify different filters/conditions within the script. It must return the processed data to pass to the next pipeline or to be returned. This script has to be escaped to fit in the TPA as a JSON.",
    "variables_este_es_el_objeto": "variables: This is the object passed to the script containing the variableization. The collector will also add two keys (from, to) to the object containing the window to filter the information.",
    "este_es_un_ejemplo": "This is an example of a script without being escaped:",
    "toma_datos_de_la_API": "It fetches data from the GitHub GQL API containing information about cards (project card movements - old column and new column) and applies filters based on the variables passed to it. The stage would look like this:",
    "como_se_puede_ver_2": "As you can see, it will filter and retain the issues whose cards have been moved from a column called 'In progress' to a column called 'In review'. It will also use the from and to to filter the data.",
    "CLOSE": "Close"
  },
  "section": {
    "example1": "Repository branches",
    "example2": "Create branch",
    "example3": "Delete branch",
    "example4": "View issues",
    "example5": "Create issues",
    "example6": "Create PR",
    "example7": "Open PRs",
    "example8": "Merge a PR",
    "example9": "Pull the branch",
    "example10": "Create file",
    "example11": "Make commit",
    "example12": "Push",
    "example13": "Compute TPA Metrics",
    "example14": "Compute Metric",
    "example15": "Check in response",
    "example16": "Merge last created PR",
    "example17": "Check in response 2",
    "example18": "Delete file",
    "example19": "Delete repository",
    "example20": "Change branch",
    "example21": "Create new branch",
    "example22": "Old check in response",
    "example23": "Clone repository",
    "example24": "Info from a repository",
    "example25": "List of repositories",
    "example26": "GitLab repository branches",
    "example27": "Create GitLab branch",
    "example28": "Delete GitLab branch",
    "example29": "View Jira issues",
    "example30": "Create Jira issues",
    "example31": "Create GitLab MR",
    "example32": "Open GitLab MRs",
    "example33": "Merge a GitLab MR",
    "example34": "Pull the GitLab branch",
    "example35": "Create GitLab file",
    "example36": "Make GitLab commit",
    "example37": "Push GitLab",
    "example38": "Merge last created GitLab MR",
    "example39": "Delete GitLab file",
    "example40": "Delete GitLab repository",
    "example41": "Change GitLab branch",
    "example42": "Create new GitLab branch",
    "example43": "Clone GitLab repository",
    "example44": "Info from a GitLab repository",
    "example45": "List of GitLab repositories",
    "example46": "Edit a Jira issue",
    "example47": "Move a Jira issue",
    "example48": "Create branch with API",
    "example49": "Delete branch with API",
    "example50": "Create file with API",
    "example51": "Delete file with API",
    "example52": "Create GitLab branch with API",
    "example53": "Delete GitLab branch with API",
    "example54": "Create GitLab file with API",
    "example55": "Delete GitLab file with API",
    "example56": "Create issues in a project"
  },
  "TESTS": {
    "title": "Metrics testing with yaml",
    "copy": "Copy below",
    "ejecucion": "Execution zone",
    "guardar": "Save",
    "formato": "Set format",
    "ejecutar": "Execute tests",
    "ejemplos": "Examples",
    "viendo": "You are viewing the file:",
    "actualizar": "Update file",
    "fixed": "Using fixed window",
    "yes": "Yes",
    "no": "No",
    "FIXEDWINDOW_HELP": "Fixed window usage",
    "FIXEDWINDOW_EXPLANATION": "By default, the automated metric tester changes the time window of all metrics to the current window, according to the period of each metric (for example, the current week or the current month). If you want to use the original time window of the metric, you can change this behavior by adding the following fragment to the test script:"
  },
  "CONFIG": {
    "DOCKER_ACTIVE": "Active Docker",
    "WARNING_MESSAGE": "If this page is running in a docker container, the rest of the active dockers will not be visible.",
    "CLOSE": "Close",
    "CONTAINER_ID": "Container ID",
    "CONTAINER_NAME": "Container Name",
    "URL": "URL",
    "PORT": "Port",
    "GITHUB_TOKEN": "Github Token",
    "GITLAB_TOKEN": "GitLab Token",
    "JIRA_TOKEN": "Jira Token",
    "ACCESS_KEY": "API key",
    "HOW_TO_GET_TOKEN": "How to get a GitHub token",
    "HELP": "Help",
    "SWAGGER": "OpenAPI Specification",
    "SWAGGER_DESCRIPTION": "Swagger is a tool used to design, build, document, and use RESTful web services. It allows developers and users to understand and work with a web service API in an easier and more visual way.",
    "SWAGGER_DESCRIPTION_2": "From swagger, you can make calls to the API itself and check its correct operation without the need for other applications like Postman.",
    "OPEN_SWAGGER": "Open OpenAPI Specification (Swagger)",
    "DOCUMENTATION": "Documentation",
    "OPEN_PDF_NEW_TAB": "Open PDF in new tab",
    "CONSTANTS": "Constants",
    "BASE_URL": "Base URL",
    "DEFAULT_COLLECTOR": "Default Collector",
    "AGREEMENTS_URL": "Agreements URL",
    "COLLECTOR_EVENTS_URL": "Collector Events URL",
    "SCOPES_URL": "Scopes URL",
    "UPDATE": "Update",
    "MESSAGE": "You should restart the server to apply the changes"
  }
}
